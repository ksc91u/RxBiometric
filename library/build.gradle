apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'org.jetbrains.dokka'
apply from: '../config/quality.gradle'
apply from: '../maven_push.gradle'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion '28.0.3'

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.compileSdkVersion
    versionCode 1
    versionName "1.0"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      minifyEnabled false
      testCoverageEnabled true
    }
  }

  sourceSets {
    androidTest.java.srcDirs += "src/androidTest/kotlin"
    main.java.srcDirs += "src/main/kotlin"
    test.java.srcDirs += "src/test/kotlin"
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/LICENSE.txt'
  }

  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

jacoco {
  toolVersion = "0.7.9"
}

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
  group = "Reporting"
  description = "Generate Jacoco coverage reports for Debug build"

  reports {
    xml.enabled = true
    html.enabled = true
  }

  // what to exclude from coverage report
  // UI, "noise", generated classes, platform classes, etc.
  def excludes = [
      '**/R.class',
      '**/R$*.class',
      '**/*$ViewInjector*.*',
      '**/BuildConfig.*',
      '**/Manifest*.*',
      '**/*Test*.*',
      'android/**/*.*',
      '**/*Fragment.*',
      '**/*Activity.*'
  ]
  // generated classes
  classDirectories = fileTree(
      dir: "$buildDir/intermediates/classes/debug",
      excludes: excludes
  ) + fileTree(
      dir: "$buildDir/tmp/kotlin-classes/debug",
      excludes: excludes
  )

  // sources
  sourceDirectories = files([
      android.sourceSets.main.java.srcDirs,
      "src/main/kotlin"
  ])
  executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
}

detekt {
  version = rootProject.ext.detektVersion
  profile("main") {
    input = "$projectDir"
    config = "$projectDir/detekt.yml"
    filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
  }
}

ktlint {
  verbose = true
  reporters = ["CHECKSTYLE", "PLAIN"]
}

dokka {
  outputFormat = 'html'
  outputDirectory = "$buildDir/javadoc"
}

dependencies {
  api deps.rxjava2
  api deps.rxandroid2
  api deps.rxkotlin2
  implementation deps.supportannotations
  implementation deps.kotlinstdlib
  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation deps.robolectric
  testImplementation deps.mockitocore
}

buildscript {
  repositories {
    mavenCentral()
    jcenter()
    google()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }

  dependencies {
    classpath deps.kotlingradleplugin
    classpath deps.detekt
    classpath deps.ktlintgradle
    classpath deps.dokka
  }
}

repositories {
  mavenCentral()
  jcenter()
  google()
  maven {
    url 'https://plugins.gradle.org/m2/'
  }
}